server.port = 0
server.forward-headers-strategy = framework

spring.application.name = core-service

spring.zipkin.baseUrl = http://localhost:9411/
spring.zipkin.sender.type = kafka

springdoc.api-docs.path = /api-docs

spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=pipe_of_gandalf

spring.cache.type=hazelcast

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

spring.kafka.bootstrap-servers = localhost:9094
spring.kafka.consumer.auto-offset-reset = earliest
spring.kafka.producer.value-serializer = org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping = \
  purchaseDto:com.operatorservices.coreservice.dto.PurchaseDto, \
  exceptionDto:com.operatorservices.coreservice.dto.ExceptionDto

spring.kafka.consumer.properties.partition.assignment.strategy = org.apache.kafka.clients.consumer.RoundRobinAssignor
spring.kafka.consumer.value-deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping = \
  purchaseOrder:com.operatorservices.coreservice.dto.PurchaseOrderDto
spring.kafka.consumer.properties.spring.json.trusted.packages = *

spring.cloud.consul.host = localhost
spring.cloud.consul.port = 8500
spring.cloud.consul.discovery.instanceId = \
  ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}